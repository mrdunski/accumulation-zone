// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mrdunski/accumulation-zone/glacier (interfaces: Cli)

// Package mock_glacier is a generated GoMock package.
package mock_glacier

import (
	reflect "reflect"

	glacier "github.com/aws/aws-sdk-go/service/glacier"
	gomock "github.com/golang/mock/gomock"
)

// MockCli is a mock of Cli interface.
type MockCli struct {
	ctrl     *gomock.Controller
	recorder *MockCliMockRecorder
}

// MockCliMockRecorder is the mock recorder for MockCli.
type MockCliMockRecorder struct {
	mock *MockCli
}

// NewMockCli creates a new mock instance.
func NewMockCli(ctrl *gomock.Controller) *MockCli {
	mock := &MockCli{ctrl: ctrl}
	mock.recorder = &MockCliMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCli) EXPECT() *MockCliMockRecorder {
	return m.recorder
}

// DeleteArchive mocks base method.
func (m *MockCli) DeleteArchive(arg0 *glacier.DeleteArchiveInput) (*glacier.DeleteArchiveOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteArchive", arg0)
	ret0, _ := ret[0].(*glacier.DeleteArchiveOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteArchive indicates an expected call of DeleteArchive.
func (mr *MockCliMockRecorder) DeleteArchive(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteArchive", reflect.TypeOf((*MockCli)(nil).DeleteArchive), arg0)
}

// DescribeJob mocks base method.
func (m *MockCli) DescribeJob(arg0 *glacier.DescribeJobInput) (*glacier.JobDescription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeJob", arg0)
	ret0, _ := ret[0].(*glacier.JobDescription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeJob indicates an expected call of DescribeJob.
func (mr *MockCliMockRecorder) DescribeJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeJob", reflect.TypeOf((*MockCli)(nil).DescribeJob), arg0)
}

// GetJobOutput mocks base method.
func (m *MockCli) GetJobOutput(arg0 *glacier.GetJobOutputInput) (*glacier.GetJobOutputOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetJobOutput", arg0)
	ret0, _ := ret[0].(*glacier.GetJobOutputOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetJobOutput indicates an expected call of GetJobOutput.
func (mr *MockCliMockRecorder) GetJobOutput(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJobOutput", reflect.TypeOf((*MockCli)(nil).GetJobOutput), arg0)
}

// InitiateJob mocks base method.
func (m *MockCli) InitiateJob(arg0 *glacier.InitiateJobInput) (*glacier.InitiateJobOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitiateJob", arg0)
	ret0, _ := ret[0].(*glacier.InitiateJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InitiateJob indicates an expected call of InitiateJob.
func (mr *MockCliMockRecorder) InitiateJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitiateJob", reflect.TypeOf((*MockCli)(nil).InitiateJob), arg0)
}

// ListJobs mocks base method.
func (m *MockCli) ListJobs(arg0 *glacier.ListJobsInput) (*glacier.ListJobsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListJobs", arg0)
	ret0, _ := ret[0].(*glacier.ListJobsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListJobs indicates an expected call of ListJobs.
func (mr *MockCliMockRecorder) ListJobs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListJobs", reflect.TypeOf((*MockCli)(nil).ListJobs), arg0)
}

// UploadArchive mocks base method.
func (m *MockCli) UploadArchive(arg0 *glacier.UploadArchiveInput) (*glacier.ArchiveCreationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadArchive", arg0)
	ret0, _ := ret[0].(*glacier.ArchiveCreationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UploadArchive indicates an expected call of UploadArchive.
func (mr *MockCliMockRecorder) UploadArchive(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadArchive", reflect.TypeOf((*MockCli)(nil).UploadArchive), arg0)
}
