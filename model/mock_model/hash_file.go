// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mrdunski/accumulation-zone/model (interfaces: HashedFile)

// Package mock_model is a generated GoMock package.
package mock_model

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockHashedFile is a mock of HashedFile interface.
type MockHashedFile struct {
	ctrl     *gomock.Controller
	recorder *MockHashedFileMockRecorder
}

// MockHashedFileMockRecorder is the mock recorder for MockHashedFile.
type MockHashedFileMockRecorder struct {
	mock *MockHashedFile
}

// NewMockHashedFile creates a new mock instance.
func NewMockHashedFile(ctrl *gomock.Controller) *MockHashedFile {
	mock := &MockHashedFile{ctrl: ctrl}
	mock.recorder = &MockHashedFileMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHashedFile) EXPECT() *MockHashedFileMockRecorder {
	return m.recorder
}

// Hash mocks base method.
func (m *MockHashedFile) Hash() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Hash")
	ret0, _ := ret[0].(string)
	return ret0
}

// Hash indicates an expected call of Hash.
func (mr *MockHashedFileMockRecorder) Hash() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Hash", reflect.TypeOf((*MockHashedFile)(nil).Hash))
}

// Path mocks base method.
func (m *MockHashedFile) Path() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Path")
	ret0, _ := ret[0].(string)
	return ret0
}

// Path indicates an expected call of Path.
func (mr *MockHashedFileMockRecorder) Path() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Path", reflect.TypeOf((*MockHashedFile)(nil).Path))
}
