// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mrdunski/accumulation-zone/model (interfaces: HashedFile,FileWithContent,ChangeIdHolder,IdentifiableHashedFile)

// Package mock_model is a generated GoMock package.
package mock_model

import (
	io "io"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockHashedFile is a mock of HashedFile interface.
type MockHashedFile struct {
	ctrl     *gomock.Controller
	recorder *MockHashedFileMockRecorder
}

// MockHashedFileMockRecorder is the mock recorder for MockHashedFile.
type MockHashedFileMockRecorder struct {
	mock *MockHashedFile
}

// NewMockHashedFile creates a new mock instance.
func NewMockHashedFile(ctrl *gomock.Controller) *MockHashedFile {
	mock := &MockHashedFile{ctrl: ctrl}
	mock.recorder = &MockHashedFileMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHashedFile) EXPECT() *MockHashedFileMockRecorder {
	return m.recorder
}

// Hash mocks base method.
func (m *MockHashedFile) Hash() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Hash")
	ret0, _ := ret[0].(string)
	return ret0
}

// Hash indicates an expected call of Hash.
func (mr *MockHashedFileMockRecorder) Hash() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Hash", reflect.TypeOf((*MockHashedFile)(nil).Hash))
}

// Path mocks base method.
func (m *MockHashedFile) Path() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Path")
	ret0, _ := ret[0].(string)
	return ret0
}

// Path indicates an expected call of Path.
func (mr *MockHashedFileMockRecorder) Path() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Path", reflect.TypeOf((*MockHashedFile)(nil).Path))
}

// MockFileWithContent is a mock of FileWithContent interface.
type MockFileWithContent struct {
	ctrl     *gomock.Controller
	recorder *MockFileWithContentMockRecorder
}

// MockFileWithContentMockRecorder is the mock recorder for MockFileWithContent.
type MockFileWithContentMockRecorder struct {
	mock *MockFileWithContent
}

// NewMockFileWithContent creates a new mock instance.
func NewMockFileWithContent(ctrl *gomock.Controller) *MockFileWithContent {
	mock := &MockFileWithContent{ctrl: ctrl}
	mock.recorder = &MockFileWithContentMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFileWithContent) EXPECT() *MockFileWithContentMockRecorder {
	return m.recorder
}

// Content mocks base method.
func (m *MockFileWithContent) Content() (io.ReadCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Content")
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Content indicates an expected call of Content.
func (mr *MockFileWithContentMockRecorder) Content() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Content", reflect.TypeOf((*MockFileWithContent)(nil).Content))
}

// Hash mocks base method.
func (m *MockFileWithContent) Hash() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Hash")
	ret0, _ := ret[0].(string)
	return ret0
}

// Hash indicates an expected call of Hash.
func (mr *MockFileWithContentMockRecorder) Hash() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Hash", reflect.TypeOf((*MockFileWithContent)(nil).Hash))
}

// Path mocks base method.
func (m *MockFileWithContent) Path() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Path")
	ret0, _ := ret[0].(string)
	return ret0
}

// Path indicates an expected call of Path.
func (mr *MockFileWithContentMockRecorder) Path() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Path", reflect.TypeOf((*MockFileWithContent)(nil).Path))
}

// MockChangeIdHolder is a mock of ChangeIdHolder interface.
type MockChangeIdHolder struct {
	ctrl     *gomock.Controller
	recorder *MockChangeIdHolderMockRecorder
}

// MockChangeIdHolderMockRecorder is the mock recorder for MockChangeIdHolder.
type MockChangeIdHolderMockRecorder struct {
	mock *MockChangeIdHolder
}

// NewMockChangeIdHolder creates a new mock instance.
func NewMockChangeIdHolder(ctrl *gomock.Controller) *MockChangeIdHolder {
	mock := &MockChangeIdHolder{ctrl: ctrl}
	mock.recorder = &MockChangeIdHolderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChangeIdHolder) EXPECT() *MockChangeIdHolderMockRecorder {
	return m.recorder
}

// ChangeId mocks base method.
func (m *MockChangeIdHolder) ChangeId() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeId")
	ret0, _ := ret[0].(string)
	return ret0
}

// ChangeId indicates an expected call of ChangeId.
func (mr *MockChangeIdHolderMockRecorder) ChangeId() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeId", reflect.TypeOf((*MockChangeIdHolder)(nil).ChangeId))
}

// MockIdentifiableHashedFile is a mock of IdentifiableHashedFile interface.
type MockIdentifiableHashedFile struct {
	ctrl     *gomock.Controller
	recorder *MockIdentifiableHashedFileMockRecorder
}

// MockIdentifiableHashedFileMockRecorder is the mock recorder for MockIdentifiableHashedFile.
type MockIdentifiableHashedFileMockRecorder struct {
	mock *MockIdentifiableHashedFile
}

// NewMockIdentifiableHashedFile creates a new mock instance.
func NewMockIdentifiableHashedFile(ctrl *gomock.Controller) *MockIdentifiableHashedFile {
	mock := &MockIdentifiableHashedFile{ctrl: ctrl}
	mock.recorder = &MockIdentifiableHashedFileMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIdentifiableHashedFile) EXPECT() *MockIdentifiableHashedFileMockRecorder {
	return m.recorder
}

// ChangeId mocks base method.
func (m *MockIdentifiableHashedFile) ChangeId() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeId")
	ret0, _ := ret[0].(string)
	return ret0
}

// ChangeId indicates an expected call of ChangeId.
func (mr *MockIdentifiableHashedFileMockRecorder) ChangeId() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeId", reflect.TypeOf((*MockIdentifiableHashedFile)(nil).ChangeId))
}

// Hash mocks base method.
func (m *MockIdentifiableHashedFile) Hash() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Hash")
	ret0, _ := ret[0].(string)
	return ret0
}

// Hash indicates an expected call of Hash.
func (mr *MockIdentifiableHashedFileMockRecorder) Hash() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Hash", reflect.TypeOf((*MockIdentifiableHashedFile)(nil).Hash))
}

// Path mocks base method.
func (m *MockIdentifiableHashedFile) Path() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Path")
	ret0, _ := ret[0].(string)
	return ret0
}

// Path indicates an expected call of Path.
func (mr *MockIdentifiableHashedFileMockRecorder) Path() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Path", reflect.TypeOf((*MockIdentifiableHashedFile)(nil).Path))
}
