// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mrdunski/accumulation-zone/model (interfaces: ChangeCommitter)

// Package mock_model is a generated GoMock package.
package mock_model

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/mrdunski/accumulation-zone/model"
)

// MockChangeCommitter is a mock of ChangeCommitter interface.
type MockChangeCommitter struct {
	ctrl     *gomock.Controller
	recorder *MockChangeCommitterMockRecorder
}

// MockChangeCommitterMockRecorder is the mock recorder for MockChangeCommitter.
type MockChangeCommitterMockRecorder struct {
	mock *MockChangeCommitter
}

// NewMockChangeCommitter creates a new mock instance.
func NewMockChangeCommitter(ctrl *gomock.Controller) *MockChangeCommitter {
	mock := &MockChangeCommitter{ctrl: ctrl}
	mock.recorder = &MockChangeCommitterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChangeCommitter) EXPECT() *MockChangeCommitterMockRecorder {
	return m.recorder
}

// CommitChange mocks base method.
func (m *MockChangeCommitter) CommitChange(arg0 string, arg1 model.Change) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CommitChange", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CommitChange indicates an expected call of CommitChange.
func (mr *MockChangeCommitterMockRecorder) CommitChange(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommitChange", reflect.TypeOf((*MockChangeCommitter)(nil).CommitChange), arg0, arg1)
}
